Turn=[libre, uti1, uti2]{
	etat=3;
	init = 0;
	0=libre;
	1=uti1;
	2=uti2;
	0->1[prend1];
	0->2[prend2];
	1->1[prend1];
	2->2[prend2];
	1->1[estCe1];
	2->2[estCe2];
	1->2[prend2];
	2->1[prend1];
};;

Qx=[vrai, faux]{
    etat=2;
	init=0;
	0=faux;
	1=vrai;
	0->1[devientVrai];
	1->0[devientFaux];
	1->1[estCeVrai];
	0->0[estCeFaux];
};;

Processus=[crit, debut, fin, attente,transition]{
    etat=5;
    init=2;
    0=attente;
    1=crit;
    2=debut;
    3=transition;
    4=fin;
    2->3[vaTransition];
    3->0[vaCrit];
    0->1[execCrit];
    1->4[fin];
};;

Systeme=<Processus P1, Processus P2, Qx Q1, Qx Q2, Turn T>{
    <vaTransition,_,_,_,prend1>;
    <vaCrit,_,devientVrai,_,_>;
    <execCrit,_,_,estCeFaux,_>;
    <execCrit,_,_,_,estCe2>;
    <fin,_,devientFaux,_,_>;
    
    <_,vaTransition,_,_,prend2>;
    <_,vaCrit,_,devientVrai,_>;
    <_,execCrit,estCeFaux,_,_>;
    <_,execCrit,_,_,estCe1>;
    <_,fin,_,devientFaux,_>;
};;

// Surete 1 : Il existe au moins un chemin menant à la fin des deux processus
Systeme += surete <- AF(P1.fin && P2.fin);;

// Exclusion mutuelle : Il n'existe pas de chemin menant à deux exécutions critiques simultanées
Systeme += exclusionMutuelle <- !(EF(P1.crit && P2.crit));;

// Surete 2 : Il existe au moins un chemin menant à un deadlock
Systeme += deadlock <- EF(!EX(true) && (!P1.fin || !P2.fin));;

// Equité Forte : Quel que soit le chemin, un processus au moins a effectué sa section critique
Systeme += equiteForte <- AG((P1.attente -> AF(P1.crit)) &&(P2.attente -> AF(P2.crit)));;
// Equité Faible : Il existe un chemin pour lequel p1 ou p2 peut exécuter sa section critique
Systeme += equiteFaible <- AG((P1.attente -> EF(P1.crit)) && (P2.attente -> EF(P2.crit)));;


todot simpleSolutionReverseCTL.dot Systeme;;
