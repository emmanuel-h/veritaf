Turn=[libre, uti1, uti2]{
	etat=3;
	init = 0;
	0=libre;
	1=uti1;
	2=uti2;
	0->1[prend1];
	0->2[prend2];
	1->1[estCe1];
	2->2[estCe2];
	1->2[prend2];
	2->1[prend1];
};;

Processus=[crit, debut, fin, attenteCrit]{
    etat=4;
    init=0;
    0=debut;
    1=crit;
    2=attenteCrit;
    3=fin;
    0->2[vaCrit];
    2->3[execCrit];
};;

systeme = <Turn t, Processus p1, Processus p2>{
    <prend1,vaCrit,_>;
    <estCe2,execCrit,_>;
    
    <prend2,_,vaCrit>;
    <estCe1,_,execCrit>;
};;

todot primitive1.dot systeme;;


//Sureté 1 : Prouve qu'il n'est pas possible de finir avec les deux sections critiques (deadlock)
systeme += surete1 <- EF(p1.fin && p2.fin);;

// Sureté 2 : Existe-t-il au moins un chemin menant à un deadlock
systeme += surete2 <- EF(!EX(true) && (!p1.fin || !p2.fin));;

// Exclusion mutuelle : Il n'existe pas de chemin menant à deux exécutions critiques simultanées
systeme += exclusionMutuelle <- EF(p1.crit && p2.crit);;

// Equité Forte : Quel que soit le chemin, un processus au moins a effectué sa section critique
systeme += equiteForte <- AF(p1.fin || p2.fin);;

// Equité Faible : Il existe un chemin pour lequel p1 ou p2 peut exécuter sa section critique
systeme += equiteFaible <- EF(p1.fin || p2.fin);;

todot ctl.dot systeme;;

/*
Propriété de sûreté
Propriété d'exclusion mutuelle
Propriété d'équité : -Faible EF
                     -Forte  AF
*/
